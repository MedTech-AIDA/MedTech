import { jsPDF } from 'jspdf';

// Mock base64 logo (1x1 transparent PNG, replace with real logo for production)
const mockLogoBase64 =
  'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=';

const PAGE_WIDTH = 210;
const PAGE_HEIGHT = 297;
const HEADER_HEIGHT = 30;
const FOOTER_HEIGHT = 12;
const TOP_MARGIN = HEADER_HEIGHT + 8;
const BOTTOM_MARGIN = FOOTER_HEIGHT + 8;
const SAFE_BOTTOM = PAGE_HEIGHT - BOTTOM_MARGIN;

function drawHeader(doc: jsPDF) {
  doc.setFillColor(16, 185, 129); // Tailwind green-500
  doc.rect(0, 0, PAGE_WIDTH, HEADER_HEIGHT, 'F');
  doc.addImage(
    `data:image/png;base64,${mockLogoBase64}`,
    'PNG',
    10,
    5,
    20,
    20
  );
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(18);
  doc.text('MedTech Diagnostics', 35, 15);
  doc.setFontSize(10);
  doc.text('Accurate | Caring | Instant', 35, 22);
  doc.text('Contact: 0123456789 | info@medtech.com', 130, 10);
  doc.text('www.medtech.com', 130, 16);
  doc.setTextColor(0, 0, 0);
}

function drawFooter(doc: jsPDF) {
  doc.setFillColor(16, 185, 129); // Tailwind green-500
  doc.rect(0, PAGE_HEIGHT - FOOTER_HEIGHT, PAGE_WIDTH, FOOTER_HEIGHT, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(10);
  doc.text('MedTech Diagnostics | Confidential Medical Report | Generated by MedTech', PAGE_WIDTH / 2, PAGE_HEIGHT - 5, { align: 'center' });
  doc.setTextColor(0, 0, 0);
}

function checkPageSpace(doc: jsPDF, y: number, needed: number) {
  if (y + needed > SAFE_BOTTOM) {
    doc.addPage();
    drawHeader(doc);
    drawFooter(doc);
    return TOP_MARGIN;
  }
  return y;
}

export function generateDiagnosisPdf(data: any): jsPDF {
  const doc = new jsPDF();
  drawHeader(doc);
  drawFooter(doc);

  let y = TOP_MARGIN;

  // Patient Info: Prefer patient_details, fallback to report.PatientInfo
  const name = ((data.patient_details && data.patient_details.name) || (data.report && data.report.PatientInfo && data.report.PatientInfo.Name) || 'N/A').toString();
  const age = ((data.patient_details && data.patient_details.age) || (data.report && data.report.PatientInfo && data.report.PatientInfo.Age) || 'N/A').toString();
  const gender = ((data.patient_details && data.patient_details.gender) || (data.report && data.report.PatientInfo && data.report.PatientInfo.Gender) || 'N/A').toString();

  doc.setFontSize(13);
  doc.setFont(undefined, 'bold');
  doc.text('Patient Information', 10, y);
  doc.setFont(undefined, 'normal');
  y += 7;
  doc.text(`Name: ${name}`, 10, y);
  doc.text(`Age: ${age}`, 70, y);
  doc.text(`Gender: ${gender}`, 120, y);
  y += 10;

  // Use report for the rest
  const report = data.report || data;

  // Diagnosis Info
  y = checkPageSpace(doc, y, 30);
  doc.setFontSize(13);
  doc.setFont(undefined, 'bold');
  doc.text('Diagnosis Summary', 10, y);
  doc.setFont(undefined, 'normal');
  y += 7;
  doc.setFontSize(11);
  doc.text(`Urgency: ${(report.Urgency || 'N/A').toString()}`, 10, y);
  y += 6;
  doc.text(`Recommendation: ${(report.Recommendation || 'N/A').toString()}`, 10, y, { maxWidth: 190 });
  y += 10;
  doc.text('Reason for Consultation:', 10, y);
  y += 6;
  doc.text((report.ReasonForConsultation || 'N/A').toString(), 10, y, { maxWidth: 190 });
  y += 10;

  // Main Symptoms
  y = checkPageSpace(doc, y, 20 + (Array.isArray(report.MainSymptoms) ? report.MainSymptoms.length * 5 : 0));
  doc.setFont(undefined, 'bold');
  doc.text('Main Symptoms:', 10, y);
  doc.setFont(undefined, 'normal');
  y += 6;
  if (Array.isArray(report.MainSymptoms)) {
    report.MainSymptoms.forEach((symptom: string) => {
      y = checkPageSpace(doc, y, 5);
      doc.text(`- ${(symptom || 'N/A').toString()}`, 14, y);
      y += 5;
    });
  }
  y += 4;

  // Top Disease Matches
  y = checkPageSpace(doc, y, 20);
  doc.setFont(undefined, 'bold');
  doc.text('Top Disease Matches:', 10, y);
  doc.setFont(undefined, 'normal');
  y += 6;
  if (Array.isArray(report.TopDiseaseMatches)) {
    report.TopDiseaseMatches.forEach((diseaseObj: any, i: number) => {
      const diseaseKey = Object.keys(diseaseObj)[0];
      const disease = diseaseObj[diseaseKey];
      const num = diseaseKey.replace('Disease', '');
      y = checkPageSpace(doc, y, 10);
      // Print disease name and match level
      doc.text(`${i + 1}. ${(disease[`Name${num}`] || 'N/A').toString()} (${(disease[`MatchLevel${num}`] || 'N/A').toString()})`, 12, y);
      y += 5;
      // Dynamically print all array fields for this disease
      Object.keys(disease).forEach((key) => {
        if (key.endsWith(num) && Array.isArray(disease[key])) {
          // Make a readable label from the key
          let label = key.replace(num, '').replace(/([A-Z])/g, ' $1').trim();
          // Capitalize first letter
          label = label.charAt(0).toUpperCase() + label.slice(1);
          y = checkPageSpace(doc, y, 5 + disease[key].length * 4);
          doc.text(`  ${label}:`, 16, y);
          y += 5;
          disease[key].forEach((item: string) => {
            y = checkPageSpace(doc, y, 4);
            doc.text(`    - ${(item || 'N/A').toString()}`, 20, y);
            y += 4;
          });
        }
      });
      y += 3;
    });
  }

  return doc;
}
